import CheckoutForm from '@components/forms/CheckoutForm';
import { DefaultLayout } from '@components/layouts/default.layout';
import { STRIPE_PUBLISHABLE_KEY } from '@lib/config';
import { prisma } from '@lib/db';
import { stripe } from '@lib/stripe';
import { Product } from '@lib/types';
import { Elements } from '@stripe/react-stripe-js';
import { loadStripe } from '@stripe/stripe-js';
import { GetServerSideProps } from 'next';
import Head from 'next/head';
import { ParsedUrlQuery } from 'querystring';
import { ReactElement } from 'react';

const stripePromise = loadStripe(STRIPE_PUBLISHABLE_KEY);

export default function Checkout({
    clientSecret,
    subscriptionId,
    products,
}: {
    clientSecret: string;
    subscriptionId: string;
    products: Product[];
}) {
    return (
        <Elements
            stripe={stripePromise}
            options={{
                appearance: {
                    theme: 'night',
                },
                clientSecret: clientSecret,
            }}>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className="flex flex-col p-4 gap-4">
                <CheckoutForm products={products} subscriptionId={subscriptionId} />
            </div>
        </Elements>
    );
}

Checkout.getLayout = function getLayout(page: ReactElement) {
    return <DefaultLayout>{page}</DefaultLayout>;
};

interface IParams extends ParsedUrlQuery {
    clientSecret: string | undefined;
    subscriptionId: string | undefined;
}

export const getServerSideProps: GetServerSideProps = async context => {
    const clientSecret = (context.query as IParams).clientSecret || '';
    const subscriptionId = (context.query as IParams).subscriptionId || '';

    const plugins = await prisma.plugin.findMany();

    const products = await Promise.all(
        plugins.map(async plugin => {
            const stripeProduct = await stripe.products.retrieve(plugin.stripeProductId, {
                expand: ['default_price'],
            });
            return {
                id: plugin.id,
                name: plugin.name,
                description: plugin.description,
                price: stripeProduct.default_price,
            } as Product;
        })
    );

    return {
        props: {
            clientSecret,
            subscriptionId,
            products,
        },
    };
};
