// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stripeCustomerId String?        @unique
  email            String         @unique
  pokemon          Pokemon[]      @relation("owned_pokemon")
  subscriptions    Subscription[]

  @@map(name: "users")
}

// Privileges are permissions assigned to users
model Permission {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String @id @unique

  plugins  Plugin[] @relation("plugin_permission")
  pluginId String?

  @@map(name: "permissions")
}

model Plugin {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name            String @unique
  description     String
  stripeProductId String
  price           Float

  subscriptions         Subscription[]         @relation("subscription_plugin")
  permissions           Permission[]           @relation("plugin_permission")
  subscriptionTemplates SubscriptionTemplate[] @relation("template_plugin")

  @@map(name: "plugins")
}

model SubscriptionTemplate {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String
  price       Float

  plugins       Plugin[]       @relation("template_plugin")
  subscriptions Subscription[]

  @@map(name: "subscription_templates")
}

model Subscription {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  plugins                Plugin[]             @relation("subscription_plugin")
  stripeSubscriptionId   String               @unique
  subscriptionTemplate   SubscriptionTemplate @relation(fields: [subscriptionTemplateId], references: [id])
  subscriptionTemplateId String
  user                   User                 @relation(fields: [userId], references: [id])
  userId                 String

  @@map(name: "subscriptions")
}

model Pokemon {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name   String
  url    String
  owners User[] @relation("owned_pokemon")

  @@map(name: "pokemon")
}
